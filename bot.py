import asyncio
import os
import json
import datetime
import requests
from fake_useragent import UserAgent
from bs4 import BeautifulSoup
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

load_dotenv()

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
CACHE_FILE = os.getenv("CACHE_FILE")
ITEMS_PER_PAGE = os.getenv("ITEMS_PER_PAGE")

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –°—Ç–∞–Ω–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä—É–ø–∏ ---
class Form(StatesGroup):
    group_link = State()

# --- –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ (—ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏) ---
BELLS_INTERVALS = [
    ("07:05", "07:50"),
    ("08:00", "08:45"),
    ("08:55", "09:40"),
    ("09:50", "10:35"),
    ("10:45", "11:30"),
    ("11:40", "12:25"),
    ("12:45", "13:30"),
    ("13:40", "14:25"),
    ("14:35", "15:20"),
]

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: –∫–µ—à –≥—Ä—É–ø ---
def is_cache_stale():
    if not os.path.exists(CACHE_FILE):
        return True
    data = json.load(open(CACHE_FILE, encoding="utf-8"))
    last = datetime.datetime.fromisoformat(data["last_updated"])
    return (datetime.datetime.now() - last).days >= 1

def fetch_groups():
    ua = UserAgent()
    r = requests.get("https://zsm1.bydgoszcz.pl/strony/plan/", headers={"User-Agent": ua.random})
    soup = BeautifulSoup(r.text, "html.parser")
    nav = soup.find("nav", class_="nav-menu")
    out = []
    for a in nav.find_all("a"):
        box = a.find("div", class_="box")
        if box:
            out.append({
                "group_title": box.text.strip(),
                "group_link": f"https://zsm1.bydgoszcz.pl/strony/plan/{a['href']}"
            })
    return out

def get_groups():
    if is_cache_stale():
        groups = fetch_groups()
        json.dump({
            "last_updated": datetime.datetime.now().isoformat(),
            "groups": groups
        }, open(CACHE_FILE, "w", encoding="utf-8"), ensure_ascii=False, indent=2)
        return groups
    return json.load(open(CACHE_FILE, encoding="utf-8"))["groups"]

# --- –ü–∞—Ä—Å–µ—Ä —Ç–∞–±–ª–∏—Ü—ñ —Ä–æ–∑–∫–ª–∞–¥—É ---
def parse_schedule_table(url: str):
    r = requests.get(url)
    soup = BeautifulSoup(r.text, "html.parser")
    tbl = soup.select_one("table.tabela")
    if not tbl:
        return None, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥."
    headers = [th.get_text(strip=True) for th in tbl.select("tr:first-child th")]
    rows = []
    for tr in tbl.select("tr")[1:]:
        rows.append([td.get_text(" ", strip=True) for td in tr.find_all("td")])
    return (headers, rows), None

# --- Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
def gen_group_kb(page: int = 0):
    groups = get_groups()
    start, end = page * ITEMS_PER_PAGE, (page + 1) * ITEMS_PER_PAGE
    kb = []
    for g in groups[start:end]:
        kb.append([InlineKeyboardButton(text=g["group_title"], callback_data=f"set|{g['group_link']}")])
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"pg|{page-1}"))
    if end < len(groups):
        nav.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"pg|{page+1}"))
    if nav:
        kb.append(nav)
    return InlineKeyboardMarkup(inline_keyboard=kb)

def gen_days_kb(link: str):
    days = ["Poniedzia≈Çek", "Wtorek", "≈öroda", "Czwartek", "PiƒÖtek"]
    kb = [[InlineKeyboardButton(text=day, callback_data=f"day|{i}|{link}")] for i, day in enumerate(days)]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ ---
@dp.message(F.text == "/start")
async def cmd_start(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    if data.get("group_link"):
        await msg.answer(
            "–ü—Ä–∏–≤—ñ—Ç! –ì—Ä—É–ø—É –≤–∏–±—Ä–∞–Ω–æ.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ:\n"
            "/bells  /schedule  /today  /current  /profile  /help"
        )
    else:
        await msg.answer("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É:", reply_markup=gen_group_kb(0))
        await state.clear()

@dp.message(F.text.in_({"/help", "/commands"}))
async def cmd_help(msg: types.Message):
    await msg.answer(
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/setgroup ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É\n"
        "/bells ‚Äî –¥–∑–≤—ñ–Ω–∫–∏\n"
        "/schedule ‚Äî –≤–∏–±—ñ—Ä –¥–Ω—è\n"
        "/today ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ\n"
        "/current ‚Äî –∑–∞—Ä–∞–∑\n"
        "/profile ‚Äî –ø—Ä–æ—Ñ—ñ–ª—å\n"
        "/help ‚Äî —Ü–µ"
    )

@dp.message(F.text == "/profile")
async def cmd_profile(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    link = data.get("group_link")
    if link:
        await msg.answer(f"–í–∞—à–∞ –≥—Ä—É–ø–∞: {link}")
    else:
        await msg.answer("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. /setgroup")

@dp.message(F.text == "/setgroup")
async def cmd_setgroup(msg: types.Message):
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É:", reply_markup=gen_group_kb(0))

@dp.callback_query(F.data.startswith("pg|"))
async def cb_pg(cb: types.CallbackQuery):
    page = int(cb.data.split("|")[1])
    await cb.message.edit_reply_markup(reply_markup=gen_group_kb(page))
    await cb.answer()

@dp.callback_query(F.data.startswith("set|"))
async def cb_set(cb: types.CallbackQuery, state: FSMContext):
    link = cb.data.split("|",1)[1]
    await state.update_data(group_link=link)
    await cb.message.answer("‚úÖ –ì—Ä—É–ø—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    await cb.answer()

@dp.message(F.text == "/bells")
async def cmd_bells(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("group_link"):
        await msg.answer("–°–ø–æ—á–∞—Ç–∫—É /setgroup"); return
    await msg.answer("–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤:\n" + "\n".join(f"{i+1}. {s[0]}‚Äì{s[1]}" for i,s in enumerate(BELLS_INTERVALS)))

@dp.message(F.text == "/schedule")
async def cmd_schedule(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    link = data.get("group_link")
    if not link:
        await msg.answer("–°–ø–æ—á–∞—Ç–∫—É /setgroup"); return
    parsed, err = parse_schedule_table(link)
    if err:
        await msg.answer(err); return
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=gen_days_kb(link))

@dp.callback_query(F.data.startswith("day|"))
async def cb_day(cb: types.CallbackQuery):
    _, di, link = cb.data.split("|",2)
    d = int(di)
    parsed, err = parse_schedule_table(link)
    if err:
        await cb.message.answer(err)
    else:
        headers, rows = parsed
        col = d+2
        day = headers[col] if col < len(headers) else None
        text = [f"üìÖ {day}:"]
        for r in rows:
            if col < len(r) and r[col].strip():
                text.append(f"{r[1]} ‚Üí {r[col]}")
        if len(text)==1: text.append("–ù–µ–º–∞—î –∑–∞–Ω—è—Ç—å.")
        await cb.message.answer("\n".join(text))
    await cb.answer()

@dp.message(F.text == "/today")
async def cmd_today(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    link = data.get("group_link")
    if not link:
        await msg.answer("–°–ø–æ—á–∞—Ç–∫—É /setgroup"); return
    parsed, err = parse_schedule_table(link)
    if err:
        await msg.answer(err); return
    headers, rows = parsed
    wd = datetime.datetime.now().weekday()
    col = wd+2
    day = headers[col] if col < len(headers) else None
    text = [f"üìÜ {day}:"]
    for r in rows:
        if col < len(r) and r[col].strip():
            text.append(f"{r[1]} ‚Üí {r[col]}")
    if len(text)==1: text.append("–ù–µ–º–∞—î –∑–∞–Ω—è—Ç—å.")
    await msg.answer("\n".join(text))

@dp.message(F.text == "/current")
async def cmd_current(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    link = data.get("group_link")
    if not link:
        await msg.answer("–°–ø–æ—á–∞—Ç–∫—É /setgroup"); return
    # –∑–Ω–∞–π—Ç–∏ —Ç–µ–ø–µ—Ä–µ—à–Ω—ñ–π –¥–∑–≤—ñ–Ω–æ–∫
    now = datetime.datetime.now().time()
    period = None
    for i, (start, end) in enumerate(BELLS_INTERVALS):
        st = datetime.datetime.strptime(start, "%H:%M").time()
        en = datetime.datetime.strptime(end, "%H:%M").time()
        if st <= now <= en:
            period = i
            break
    if period is None:
        await msg.answer("–ó–∞—Ä–∞–∑ –ø–µ—Ä–µ—Ä–≤–∞ –∞–±–æ –ø–æ–∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º."); return

    parsed, err = parse_schedule_table(link)
    if err:
        await msg.answer(err); return
    headers, rows = parsed
    wd = datetime.datetime.now().weekday()
    col = wd+2
    if col >= len(headers):
        await msg.answer("–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–∏–π."); return

    # –≤–∏–≤–µ—Å—Ç–∏ —É—Ä–æ–∫
    lesson = ""
    for r in rows:
        if r and r[0].isdigit() and int(r[0])==period+1:
            lesson = r[col].strip()
            break
    if not lesson:
        await msg.answer("–ù–µ–º–∞—î —É—Ä–æ–∫—É –∑–∞—Ä–∞–∑.")
    else:
        await msg.answer(f"–ó–∞—Ä–∞–∑ ({period+1} —É—Ä–æ–∫):\n{lesson}")

# --- –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ ---
async def set_commands():
    cmds = [
        BotCommand(command="/start", description="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
        BotCommand(command="/setgroup", description="–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É"),
        BotCommand(command="/bells", description="–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤"),
        BotCommand(command="/schedule", description="–í–∏–±—Ä–∞—Ç–∏ –¥–µ–Ω—å —Ä–æ–∑–∫–ª–∞–¥—É"),
        BotCommand(command="/today", description="–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"),
        BotCommand(command="/current", description="–Ø–∫–∏–π –∑–∞—Ä–∞–∑ —É—Ä–æ–∫"),
        BotCommand(command="/profile", description="–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å"),
        BotCommand(command="/help", description="–î–æ–ø–æ–º–æ–≥–∞"),
    ]
    await bot.set_my_commands(cmds)

async def main():
    await set_commands()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())